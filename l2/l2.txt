; convert_tree(l1l2l3) = 
    ;
    ; = nil
    ;                                 , daca l1l2l3 = null
    ;
    ; = append(list(l1), 
    ;          list(2), 
    ;          convert_tree(l2), 
    ;          convert_tree(l3))
    ;                                 , daca l2 != null si l3 != null
    ;
    ; = append(list(l1), 
    ;          list(1), 
    ;          convert_tree(l2))
    ;                                 , daca l2 != null
    ;
    ; = append(list(l1), 
    ;          list(1), 
    ;          convert_tree(l3))
    ;                                 , daca l3 != null
    ;
    ; = append(list(l1), list(0))
    ;                                 , altfel

(defun convert_tree(l)

    (cond
    
         ((null l) nil)
         
         (
            (
              and 
              (not (null (cadr l))) 
              (not (null (caddr l)))
            ) 
            
            (
              append 
              (list (car l)) 
              '(2) 
              (convert_tree(cadr l))
              (convert_tree(caddr l))
            )
          )
          
         (
            (not (null (cadr l))) 
            
            (
              append 
              (list (car l)) 
              '(1) 
              (convert_tree(cadr l)) 
            )
          )
          
         (
            (not (null (caddr l)))
            
            (
              append 
              (list (car l)) 
              '(1) 
              (convert_tree(caddr l)) 
            )
          )
          
         (T (append (list (car l)) '(0)))
    )
)

(print(convert_tree '(A (B) (C (D) (E (F))))))