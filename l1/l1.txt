; a

; _n_elem (l1..lm m pos) = 
    ; nil, n = 0
    ; l1, n = pos
    ; _n_elem(l1...lm, n, pos + 1)

(defun _n_elem (l n pos)
    (cond
        ((null l) nil)
        ((= n pos) (car l))
        (T (_n_elem (cdr l) n (+ pos 1)))
    )
)

(defun n_elem (l n)
    (_n_elem l n 1)
)

(print (n_elem '(1 2 3 4 5 6 7 8 9 10) '5))

; b

; check_atom (l1..ln e) =
	; nil, n = 0
	; true, l1 = atom si l0 = e
	; check_atom (l2..ln, e), daca l1 = atom
	; check_atom (l1, e) sau check_atom(l2..ln, e)
	;			, daca l1 = list

(defun check_atom (l e)
    (cond 
        ((null l) nil)
        ((and (atom (car l)) (equal (car l) e)) t)
        ((atom (car l)) (check_atom (cdr l) e))
        ((list (car l)) (or (check_atom (car l) e) (check_atom (cdr l) e)))
    )
)

(print (check_atom '(1 2 (3 (a 5) (6 7)) 8 (9 10)) 'a))

; c

; all_sublists(l) =
	; nil, daca l = atom
	; l + all_sublists(l), altfel

(defun all_sublists (l)
    (cond
        ((atom l) nil)
        (T (apply 'append (list l) (mapcar 'all_sublists l)))
    )
)

(print (all_sublists '(1 2 (3 (4 5) (6 7)) 8 (9 10))))

; d

; transform_set (l1..ln) =
	; nil, n = 0
	; l1 + transform_set(remove_appearances(l2..ln, l1))
	;	, altfel

(defun transform_set (l)
    (cond
        ((null l) nil)
        (T (cons (car l) (transform_set (remove_apparences (cdr l) (car l)))))
    )
)

; remove_appearances(l1..ln, e) =
	; nil, daca n = 0
	; remove_appearances(l2..ln, e), daca l1 = e
	; l1 + remove_appearances(l2..ln), altfel

(defun remove_apparences (l e)
    (cond
        ((null l) nil)
        ((equal (car l) e) (remove_apparences (cdr l) e))
        (T (cons (car l) (remove_apparences (cdr l) e)))
    )
)

(print (transform_set '(1 2 3 44 2 4 a 5 2 3 3 3 3 4 a 4 5 77)))